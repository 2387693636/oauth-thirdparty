/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.douyin.open.models;

import java.util.Objects;
import java.util.Arrays;
import com.douyin.open.models.PoiSupplierSupplierMatchOriginData;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * PoiSupplierSupplierBody1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-13T12:08:47.759385+08:00[Asia/Shanghai]")
public class PoiSupplierSupplierBody1 {
  /**
   * 匹配类型，0-离线匹配 1-实时匹配。离线匹配，不会实时返回结果，最大上传1w个数据，通过/poi/supplier/match/query/接口查询匹配结果； 在线匹配，实时返回结果，最大上传100个数据，需要申请授权。
   */
  public enum MatchTypeEnum {
    NUMBER_0(0),
    NUMBER_1(1);

    private Integer value;

    MatchTypeEnum(Integer value) {
      this.value = value;
    }
    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static MatchTypeEnum fromValue(String text) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("match_type")
  private MatchTypeEnum matchType = null;

  @JsonProperty("match_data_list")
  private List<PoiSupplierSupplierMatchOriginData> matchDataList = new ArrayList<>();

  public PoiSupplierSupplierBody1 matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

   /**
   * 匹配类型，0-离线匹配 1-实时匹配。离线匹配，不会实时返回结果，最大上传1w个数据，通过/poi/supplier/match/query/接口查询匹配结果； 在线匹配，实时返回结果，最大上传100个数据，需要申请授权。
   * @return matchType
  **/
  @Schema(required = true, description = "匹配类型，0-离线匹配 1-实时匹配。离线匹配，不会实时返回结果，最大上传1w个数据，通过/poi/supplier/match/query/接口查询匹配结果； 在线匹配，实时返回结果，最大上传100个数据，需要申请授权。")
  public MatchTypeEnum getMatchType() {
    return matchType;
  }

  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }

  public PoiSupplierSupplierBody1 matchDataList(List<PoiSupplierSupplierMatchOriginData> matchDataList) {
    this.matchDataList = matchDataList;
    return this;
  }

  public PoiSupplierSupplierBody1 addMatchDataListItem(PoiSupplierSupplierMatchOriginData matchDataListItem) {
    this.matchDataList.add(matchDataListItem);
    return this;
  }

   /**
   * 第三方上传的有效匹配数据
   * @return matchDataList
  **/
  @Schema(required = true, description = "第三方上传的有效匹配数据")
  public List<PoiSupplierSupplierMatchOriginData> getMatchDataList() {
    return matchDataList;
  }

  public void setMatchDataList(List<PoiSupplierSupplierMatchOriginData> matchDataList) {
    this.matchDataList = matchDataList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoiSupplierSupplierBody1 body1 = (PoiSupplierSupplierBody1) o;
    return Objects.equals(this.matchType, body1.matchType) &&
        Objects.equals(this.matchDataList, body1.matchDataList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchType, matchDataList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoiSupplierSupplierBody1 {\n");
    
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    matchDataList: ").append(toIndentedString(matchDataList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
